#!/usr/bin/env python3

import multiprocessing
import matplotlib.pyplot as plt
import matplotlib.cbook as cbook
import pandas
import numpy
import argparse

def custom_divide(a, b):
    if b == 0:
        return 0 if a == 0 else -2
    return float(a) / float(b)
vcustom_divide = numpy.vectorize(custom_divide, otypes=[float]) # this is not performant

parser = argparse.ArgumentParser(description="Plot the data generated by copy-log.sh")
parser.add_argument("input_folder", metavar="input", type=str, help="path to folder containing the log files")
parser.add_argument("output_file", metavar="output", nargs='?', type=str, default='', help="output image path - plot will be displayed if output is left empty")
parser.add_argument("--title", "-t", default="Perfcounter Plot", type=str, help="Title of figure")
parser.add_argument("--cores", "-c",
                    default=','.join(map(str,numpy.arange(0, multiprocessing.cpu_count()))),
                    type=str,
                    help="Comma separated list of cores to plot (all by default)")

args = parser.parse_args()

plt.rcParams.update({'figure.autolayout': True})

cpus = [int(item) for item in args.cores.split(',')]

for i in cpus:
    data = numpy.genfromtxt(f"{args.input_folder}/log-{i}.txt", delimiter=',', names=['CPU','Time','inst_all', 'clock', 'stalls', 'freq'])
    time_data = (data['Time'] - data['Time'][0]) / 1e9
    ydata = vcustom_divide(data['inst_all'], data['clock'])
    plt.plot(time_data, ydata, label=f"Core {i} IPC")

    stalls_per_cycle = vcustom_divide(data['stalls'], data['clock'])
    plt.plot(time_data, stalls_per_cycle, label=f"Core {i} stalls/cycle")
    #  plt.plot(time_data, data['stalls'], label=f"Core {i} stalls")
    plt.plot(time_data, data['freq'] / 1000000, label=f"Core {i} requested frequency")

plt.xlabel("time (in seconds)")
plt.title(args.title)
plt.legend()
if args.output_file:
    figure = plt.gcf()
    figure.set_size_inches(12,8)
    plt.savefig(args.output_file, dpi=100)
else:
    plt.show()


